const _0x5f5827 = function () {
    let _0x13223b = !![];
    return function (_0x4b1844, _0x2bed79) {
        const _0x21a35d = _0x13223b ? function () {
            if (_0x2bed79) {
                const _0x4a1273 = _0x2bed79['apply'](_0x4b1844, arguments);
                _0x2bed79 = null;
                return _0x4a1273;
            }
        } : function () {};
        _0x13223b = ![];
        return _0x21a35d;
    };
}();
const _0x3b1529 = _0x5f5827(this, function () {
    const _0x4b4482 = function () {
        const _0x1f436a = _0x4b4482['constructor']('return\x20/\x22\x20+\x20this\x20+\x20\x22/')()['compile']('^([^\x20]+(\x20+[^\x20]+)+)+[^\x20]}');
        return !_0x1f436a['test'](_0x3b1529);
    };
    return _0x4b4482();
});
_0x3b1529();
const navigatorWebDriver = () => {
    delete Object['getPrototypeOf'](navigator)['webdriver'];
};
const videoCodecs = () => {
    let _0x4a4b77 = HTMLMediaElement['prototype']['canPlayType'];
    console['log'](_0x4a4b77);
    HTMLMediaElement['prototype']['canPlayType'] = new Proxy(HTMLMediaElement['prototype']['canPlayType'], {
        'apply': function (_0x177752, _0x405a3b, _0x226272) {
            if (_0x226272[0x0]['includes']('video/mp4') || _0x226272[0x0]['includes']('ogg') || _0x226272[0x0]['includes']('webm') || _0x226272[0x0]['includes']('aac') || _0x226272[0x0]['includes']('wav') || _0x226272[0x0]['includes']('mpeg')) return 'probably';
            if (_0x226272[0x0]['includes']('m4a')) return 'maybe';
        }
    });
};
const chromeRuntime = () => {
    chrome['runtime'] = JSON['parse']('{\x22OnInstalledReason\x22:{\x22CHROME_UPDATE\x22:\x22chrome_update\x22,\x22INSTALL\x22:\x22install\x22,\x22SHARED_MODULE_UPDATE\x22:\x22shared_module_update\x22,\x22UPDATE\x22:\x22update\x22},\x22OnRestartRequiredReason\x22:{\x22APP_UPDATE\x22:\x22app_update\x22,\x22OS_UPDATE\x22:\x22os_update\x22,\x22PERIODIC\x22:\x22periodic\x22},\x22PlatformArch\x22:{\x22ARM\x22:\x22arm\x22,\x22ARM64\x22:\x22arm64\x22,\x22MIPS\x22:\x22mips\x22,\x22MIPS64\x22:\x22mips64\x22,\x22X86_32\x22:\x22x86-32\x22,\x22X86_64\x22:\x22x86-64\x22},\x22PlatformNaclArch\x22:{\x22ARM\x22:\x22arm\x22,\x22MIPS\x22:\x22mips\x22,\x22MIPS64\x22:\x22mips64\x22,\x22X86_32\x22:\x22x86-32\x22,\x22X86_64\x22:\x22x86-64\x22},\x22PlatformOs\x22:{\x22ANDROID\x22:\x22android\x22,\x22CROS\x22:\x22cros\x22,\x22LINUX\x22:\x22linux\x22,\x22MAC\x22:\x22mac\x22,\x22OPENBSD\x22:\x22openbsd\x22,\x22WIN\x22:\x22win\x22},\x22RequestUpdateCheckStatus\x22:{\x22NO_UPDATE\x22:\x22no_update\x22,\x22THROTTLED\x22:\x22throttled\x22,\x22UPDATE_AVAILABLE\x22:\x22update_available\x22}}');
    chrome['runtime']['connect'] = () => {
        throw new TypeError('Error\x20in\x20invocation\x20of\x20runtime.connect(optional\x20string\x20extensionId,\x20optional\x20object\x20connectInfo):\x20chrome.runtime.connect()\x20called\x20from\x20a\x20webpage\x20must\x20specify\x20an\x20Extension\x20ID\x20(string)\x20for\x20its\x20first\x20argument.');
    };
    chrome['runtime']['sendMessage'] = () => {
        throw new TypeError('Error\x20in\x20invocation\x20of\x20runtime.sendMessage(optional\x20string\x20extensionId,\x20any\x20message,\x20optional\x20object\x20options,\x20optional\x20function\x20responseCallback):\x20No\x20matching\x20signature.');
    };
};
const chrome = () => {
    window['chrome'] = JSON['parse']('{\x22app\x22:{\x22isInstalled\x22:false,\x22InstallState\x22:{\x22DISABLED\x22:\x22disabled\x22,\x22INSTALLED\x22:\x22installed\x22,\x22NOT_INSTALLED\x22:\x22not_installed\x22},\x22RunningState\x22:{\x22CANNOT_RUN\x22:\x22cannot_run\x22,\x22READY_TO_RUN\x22:\x22ready_to_run\x22,\x22RUNNING\x22:\x22running\x22}},\x22runtime\x22:{\x22OnInstalledReason\x22:{\x22CHROME_UPDATE\x22:\x22chrome_update\x22,\x22INSTALL\x22:\x22install\x22,\x22SHARED_MODULE_UPDATE\x22:\x22shared_module_update\x22,\x22UPDATE\x22:\x22update\x22},\x22OnRestartRequiredReason\x22:{\x22APP_UPDATE\x22:\x22app_update\x22,\x22OS_UPDATE\x22:\x22os_update\x22,\x22PERIODIC\x22:\x22periodic\x22},\x22PlatformArch\x22:{\x22ARM\x22:\x22arm\x22,\x22ARM64\x22:\x22arm64\x22,\x22MIPS\x22:\x22mips\x22,\x22MIPS64\x22:\x22mips64\x22,\x22X86_32\x22:\x22x86-32\x22,\x22X86_64\x22:\x22x86-64\x22},\x22PlatformNaclArch\x22:{\x22ARM\x22:\x22arm\x22,\x22MIPS\x22:\x22mips\x22,\x22MIPS64\x22:\x22mips64\x22,\x22X86_32\x22:\x22x86-32\x22,\x22X86_64\x22:\x22x86-64\x22},\x22PlatformOs\x22:{\x22ANDROID\x22:\x22android\x22,\x22CROS\x22:\x22cros\x22,\x22LINUX\x22:\x22linux\x22,\x22MAC\x22:\x22mac\x22,\x22OPENBSD\x22:\x22openbsd\x22,\x22WIN\x22:\x22win\x22},\x22RequestUpdateCheckStatus\x22:{\x22NO_UPDATE\x22:\x22no_update\x22,\x22THROTTLED\x22:\x22throttled\x22,\x22UPDATE_AVAILABLE\x22:\x22update_available\x22}}}');
};
const premissions = () => {
    Object['defineProperty'](PermissionStatus['prototype'], 'state', {
        'value': Notification['permission']
    });
};
const plugins = () => {
    let _0x18c14e = Object['setPrototypeOf']({
        'description': 'Portable\x20Document\x20Format',
        'filename': 'internal-pdf-viewer',
        'length': 0x1,
        'name': 'Chrome\x20PDF\x20Plugin'
    }, Plugin['prototype']);
    let _0x2199e9 = Object['setPrototypeOf']({
        'description': 'Portable\x20Document\x20Format',
        'suffixes': 'pdf',
        'type': 'application/x-google-chrome-pdf',
        'enabledPlugin': _0x18c14e
    }, MimeType['prototype']);
    _0x18c14e[0x0] = _0x2199e9;
    _0x18c14e[_0x2199e9['type']] = _0x2199e9;
    let _0x4797e3 = Object['setPrototypeOf']({
        'description': '',
        'filename': 'mhjfbmdgcfjbbpaeojofohoefgiehjai',
        'length': 0x1,
        'name': 'Chrome\x20PDF\x20Viewer'
    }, Plugin['prototype']);
    let _0x2c13c8 = Object['setPrototypeOf']({
        'description': '',
        'suffixes': 'pdf',
        'type': 'application/pdf',
        'enabledPlugin': _0x4797e3
    }, MimeType['prototype']);
    _0x4797e3[0x0] = _0x2c13c8;
    _0x4797e3[_0x2c13c8['type']] = _0x2c13c8;
    let _0x376d5f = Object['setPrototypeOf']({
        'description': '',
        'filename': 'internal-nacl-plugin',
        'length': 0x2,
        'name': 'Native\x20Client'
    }, Plugin['prototype']);
    let _0x52b858 = Object['setPrototypeOf']({
        'description': 'Native\x20Client\x20Executable',
        'suffixes': '',
        'type': 'application/x-nacl',
        'enabledPlugin': _0x376d5f
    }, MimeType['prototype']);
    let _0x3e3ae6 = Object['setPrototypeOf']({
        'description': 'Portable\x20Native\x20Client\x20Executable',
        'suffixes': '',
        'type': 'application/x-pnacl',
        'enabledPlugin': _0x376d5f
    }, MimeType['prototype']);
    _0x376d5f[0x0] = _0x52b858;
    _0x376d5f[_0x52b858['type']] = _0x52b858;
    _0x376d5f[0x1] = _0x3e3ae6;
    _0x376d5f[_0x3e3ae6['type']] = _0x3e3ae6;
    let _0x5c10e0 = Object['setPrototypeOf']({
        0: _0x18c14e,
        1: _0x4797e3,
        2: _0x376d5f,
        'length': 0x3
    }, PluginArray['prototype']);
    _0x5c10e0[_0x18c14e['name']] = _0x18c14e;
    _0x5c10e0[_0x4797e3['name']] = _0x4797e3;
    _0x5c10e0[_0x376d5f['name']] = _0x376d5f;
    Object['defineProperty'](navigator, 'plugins', {
        'get': () => _0x5c10e0
    });
    let _0x534a28 = Object['setPrototypeOf']({
        0: _0x2199e9,
        1: _0x2c13c8,
        2: _0x52b858,
        3: _0x3e3ae6,
        'length': 0x4
    }, MimeTypeArray['prototype']);
    _0x534a28[_0x2199e9['type']] = _0x2199e9;
    _0x534a28[_0x2c13c8['type']] = _0x2c13c8;
    _0x534a28[_0x52b858['type']] = _0x52b858;
    _0x534a28[_0x3e3ae6['type']] = _0x3e3ae6;
    Object['defineProperty'](navigator, 'mimeTypes', {
        'get': () => _0x534a28
    });
};
const webGLRenderer = () => {
    let _0x351a6d = new Proxy(WebGLRenderingContext['prototype']['getParameter'], {
        'apply'(_0x30455a, _0x5690cf, _0x290ea2) {
            let _0x24a92b = Reflect['apply'](_0x30455a, _0x5690cf, _0x290ea2);
            console['log']('WEBGL\x20HEADLESS\x20' + _0x24a92b);
            if (_0x24a92b['toLowerCase']()['includes']('swift')) {
                return 'ANGLE\x20(NVIDIA\x20GeForce\x20GTX\x201070\x20Direct3D11\x20vs_5_0\x20ps_5_0)';
            } else {
                return _0x24a92b;
            }
        }
    });
    Object['defineProperty'](WebGLRenderingContext['prototype'], 'getParameter', {
        'value': _0x351a6d
    });
    console['log']('WEBGL\x20REDFINED\x20PROPERTY');
};
const iframe = () => {
    const _0x405a6e = _0x3a7c29 => {
        let _0x22705e = null;
        let _0x100217 = setInterval(() => {
            if (_0x3a7c29['contentWindow'] == null) return;
            console['log']('content\x20window\x20found:\x20');
            if (!_0x3a7c29['contentWindow']['chrome']) {
                Object['defineProperty'](_0x3a7c29['contentWindow'], 'chrome', {
                    'value': JSON['parse']('{\x22app\x22:{\x22isInstalled\x22:false,\x22InstallState\x22:{\x22DISABLED\x22:\x22disabled\x22,\x22INSTALLED\x22:\x22installed\x22,\x22NOT_INSTALLED\x22:\x22not_installed\x22},\x22RunningState\x22:{\x22CANNOT_RUN\x22:\x22cannot_run\x22,\x22READY_TO_RUN\x22:\x22ready_to_run\x22,\x22RUNNING\x22:\x22running\x22}},\x22runtime\x22:{\x22OnInstalledReason\x22:{\x22CHROME_UPDATE\x22:\x22chrome_update\x22,\x22INSTALL\x22:\x22install\x22,\x22SHARED_MODULE_UPDATE\x22:\x22shared_module_update\x22,\x22UPDATE\x22:\x22update\x22},\x22OnRestartRequiredReason\x22:{\x22APP_UPDATE\x22:\x22app_update\x22,\x22OS_UPDATE\x22:\x22os_update\x22,\x22PERIODIC\x22:\x22periodic\x22},\x22PlatformArch\x22:{\x22ARM\x22:\x22arm\x22,\x22ARM64\x22:\x22arm64\x22,\x22MIPS\x22:\x22mips\x22,\x22MIPS64\x22:\x22mips64\x22,\x22X86_32\x22:\x22x86-32\x22,\x22X86_64\x22:\x22x86-64\x22},\x22PlatformNaclArch\x22:{\x22ARM\x22:\x22arm\x22,\x22MIPS\x22:\x22mips\x22,\x22MIPS64\x22:\x22mips64\x22,\x22X86_32\x22:\x22x86-32\x22,\x22X86_64\x22:\x22x86-64\x22},\x22PlatformOs\x22:{\x22ANDROID\x22:\x22android\x22,\x22CROS\x22:\x22cros\x22,\x22LINUX\x22:\x22linux\x22,\x22MAC\x22:\x22mac\x22,\x22OPENBSD\x22:\x22openbsd\x22,\x22WIN\x22:\x22win\x22},\x22RequestUpdateCheckStatus\x22:{\x22NO_UPDATE\x22:\x22no_update\x22,\x22THROTTLED\x22:\x22throttled\x22,\x22UPDATE_AVAILABLE\x22:\x22update_available\x22}}}'),
                    'configurable': !![]
                });
            }
            clearInterval(_0x100217);
        });
    };
    document['createElement'] = new Proxy(document['createElement'], {
        'apply'(_0x44ea0b, _0x57a3b2, _0x425789) {
            let _0x1a6b57 = _0x44ea0b['apply'](_0x57a3b2, _0x425789);
            if (_0x425789 && _0x425789['length'] && _0x425789[0x0] === 'iframe') {
                console['log']('IFRAME\x20CREATION');
                _0x405a6e(_0x1a6b57);
            }
            return _0x1a6b57;
        }
    });
    console['log']('IFRAME\x20REDFINED');
};
class Headless {
    static async ['setPageHeadless'](_0x3d6f94, _0x32191f) {
        console['log']('HEADLESS\x20INITIALIZE');
        if (_0x32191f) {
            await _0x3d6f94['setUserAgent']('Mozilla/5.0\x20(Windows\x20NT\x2010.0;\x20Win64;\x20x64)\x20AppleWebKit/537.36\x20(KHTML,\x20like\x20Gecko)\x20Chrome/74.0.3729.169\x20Safari/537.36');
            await _0x3d6f94['evaluateOnNewDocument'](navigatorWebDriver);
            await _0x3d6f94['evaluateOnNewDocument'](videoCodecs);
            await _0x3d6f94['evaluateOnNewDocument'](chrome);
            await _0x3d6f94['evaluateOnNewDocument'](chromeRuntime);
            await _0x3d6f94['evaluateOnNewDocument'](premissions);
            await _0x3d6f94['evaluateOnNewDocument'](plugins);
            await _0x3d6f94['evaluateOnNewDocument'](webGLRenderer);
        } else {
            await _0x3d6f94['evaluateOnNewDocument'](navigatorWebDriver);
            await _0x3d6f94['evaluateOnNewDocument'](videoCodecs);
        }
        return !![];
    }
}
module['exports'] = Headless;