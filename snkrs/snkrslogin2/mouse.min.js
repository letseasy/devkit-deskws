// const _0x27d6bb = function () {
//     let _0x23b3fd = !![];
//     return function (_0x5ef6c8, _0x4455a2) {
//         const _0x11c9e9 = _0x23b3fd ? function () {
//             if (_0x4455a2) {
//                 const _0x18743c = _0x4455a2['apply'](_0x5ef6c8, arguments);
//                 _0x4455a2 = null;
//                 return _0x18743c;
//             }
//         } : function () {};
//         _0x23b3fd = ![];
//         return _0x11c9e9;
//     };
// }();
// const _0x43c724 = _0x27d6bb(this, function () {
//     const _0x337dc8 = function () {
//         const _0x180aa3 = _0x337dc8['constructor']("return /" + this + "/")()['compile']("^([^ ]+( +[^ ]+)+)+[^ ]}");
//         return !_0x180aa3['test'](_0x43c724);
//     };
//     return _0x337dc8();
// });
// _0x43c724();
// import * as Bezier from "bezier-js";
const {
    getRandom
} = require('./utils.js');
const MIN_BEFORE_CLICK_DELAY = 0xc8;
const MAX_BEFORE_CLICK_DELAY = 0x15e;
const Bezier = require('bezier-js');
const origin = {
    'x': 0x0,
    'y': 0x0
};
const sub = (_0x54ab07, _0x53db48) => {
    return {
        'x': _0x54ab07['x'] - _0x53db48['x'],
        'y': _0x54ab07['y'] - _0x53db48['y']
    };
};
const div = (_0x21bebd, _0x2873dc) => {
    return {
        'x': _0x21bebd['x'] / _0x2873dc,
        'y': _0x21bebd['y'] / _0x2873dc
    };
};
const mult = (_0x20a0d0, _0x2b675b) => {
    return {
        'x': _0x20a0d0['x'] * _0x2b675b,
        'y': _0x20a0d0['y'] * _0x2b675b
    };
};
const add = (_0xbd2f14, _0x5c7857) => {
    return {
        'x': _0xbd2f14['x'] + _0x5c7857['x'],
        'y': _0xbd2f14['y'] + _0x5c7857['y']
    };
};
const direction = (_0x3b6a64, _0x53c870) => {
    return sub(_0x53c870, _0x3b6a64);
};
const perpendicular = _0x14e2a9 => {
    return {
        'x': _0x14e2a9['y'],
        'y': -0x1 * _0x14e2a9['x']
    };
};
const magnitude = _0x2c1739 => {
    return Math['sqrt'](Math['pow'](_0x2c1739['x'], 0x2) + Math['pow'](_0x2c1739['y'], 0x2));
};
const unit = _0x4cbd25 => {
    return div(_0x4cbd25, magnitude(_0x4cbd25));
};
const setMagnitude = (_0xf28b4e, _0x11c935) => {
    return mult(unit(_0xf28b4e), _0x11c935);
};
const randomVectorOnLine = (_0x87adf8, _0x36baf6) => {
    const _0x497dd0 = direction(_0x87adf8, _0x36baf6);
    const _0x71af59 = Math['random']();
    return add(_0x87adf8, mult(_0x497dd0, _0x71af59));
};
const randomNormalLine = (_0x2ec23e, _0x3f51ef, _0x4ff681) => {
    const _0x3806d4 = randomVectorOnLine(_0x2ec23e, _0x3f51ef);
    const _0x181d4d = setMagnitude(perpendicular(direction(_0x2ec23e, _0x3806d4)), _0x4ff681);
    return [_0x3806d4, _0x181d4d];
};
const generateBezierAnchors = (_0xe12f57, _0x761cf0, _0x403866) => {
    const _0x16b6a9 = Math['round'](Math['random']()) ? 0x1 : -0x1;
    const _0x44c4fe = () => {
        const [_0x4ce62d, _0x444710] = randomNormalLine(_0xe12f57, _0x761cf0, _0x403866);
        const _0xdb87fb = mult(_0x444710, _0x16b6a9);
        return randomVectorOnLine(_0x4ce62d, add(_0x4ce62d, _0xdb87fb));
    };
    return [_0x44c4fe(), _0x44c4fe()]['sort']((_0x44647b, _0xf48fb5) => _0x44647b['x'] - _0xf48fb5['x']);
};
const clamp = (_0x521726, _0xb48eda, _0x61b597) => {
    return Math['min'](_0x61b597, Math['max'](_0xb48eda, _0x521726));
};
const overshoot = (_0x95ba5c, _0x578305) => {
    const _0x2cc979 = Math['random']() * 0x2 * Math['PI'];
    const _0x237392 = _0x578305 * Math['sqrt'](Math['random']());
    const _0x43583e = {
        'x': _0x237392 * Math['cos'](_0x2cc979),
        'y': _0x237392 * Math['sin'](_0x2cc979)
    };
    return add(_0x95ba5c, _0x43583e);
};
const bezierCurve = (_0x615c69, _0x2bbb1a, _0xc5079d = ![]) => {
    const _0x1199d4 = 0x2;
    const _0x3f86c0 = 0xc8;
    const _0x52a789 = direction(_0x615c69, _0x2bbb1a);
    const _0x32895d = magnitude(_0x52a789);
    const _0x14fe6c = clamp(_0x32895d, _0x1199d4, _0x3f86c0);
    const _0x25492b = generateBezierAnchors(_0x615c69, _0x2bbb1a, _0xc5079d??_0x14fe6c);
    return new Bezier(_0x615c69, ..._0x25492b, _0x2bbb1a);
};
const fitts = (_0x1c785e, _0x1831ba) => {
    const _0x4deabb = 0x0;
    const _0x1e85af = 0x2;
    const _0x32b952 = Math['log2'](_0x1c785e / _0x1831ba + 0x1);
    return _0x4deabb + _0x1e85af * _0x32b952;
};
const getRandomBoxPoint = ({
    x,
    y,
    width,
    height
}) => {
    return {
        'x': x + Math['random']() * width,
        'y': y + Math['random']() * height
    };
};
const getRandomXY = ({
    width,
    height
}) => {
    return {
        'x': Math['random']() * width,
        'y': Math['random']() * height
    };
};
const isBox = _0x2b5f29 => {
    return 'width' in _0x2b5f29;
};
const minimizeBoundingBox = ({
    x,
    y,
    width,
    height
}, _0x3f7acc) => {
    return {
        'x': x + width * _0x3f7acc,
        'y': y + height * _0x3f7acc,
        'width': width - width * _0x3f7acc,
        'height': height - height * _0x3f7acc
    };
};

function path(_0x4e9885, _0x229db1, _0x47fc71) {
    const _0x1ffcbf = 0x64;
    const _0x1b7aa0 = 0x19;
    const _0x3639ce = isBox(_0x229db1) ? _0x229db1['width'] : _0x1ffcbf;
    const _0x6de687 = bezierCurve(_0x4e9885, _0x229db1, _0x47fc71);
    const _0x55219a = _0x6de687['length']() * 0.8;
    const _0xd486c0 = Math['random']() * _0x1b7aa0;
    const _0x41b1fb = Math['ceil']((Math['log2'](fitts(_0x55219a, _0x3639ce) + 0x1) + _0xd486c0) * 0x3);
    const _0x427ea1 = _0x6de687['getLUT'](_0x41b1fb);
    return clampPositive(_0x427ea1);
}
const clampPositive = _0x1eb775 => {
    const _0x49256c = _0x26a5cc => {
        return Math['max'](0x0, _0x26a5cc);
    };
    return _0x1eb775['map'](_0x4857c1 => {
        return {
            'x': _0x49256c(_0x4857c1['x']),
            'y': _0x49256c(_0x4857c1['y'])
        };
    });
};
const overshootThreshold = 0x1f4;
const shouldOvershoot = (_0x38edaa, _0x276110) => {
    return magnitude(direction(_0x38edaa, _0x276110)) > overshootThreshold;
};
const getValidDestination = async (_0x2459e1, _0x39c142, _0x48f353, _0x150c03 = 0.2) => {
    let _0x3ca4f0 = null;
    let _0x21ee45 = null;
    let _0x4a071d = ![];
    let _0x1541c7 = null;
    let _0x3bb03b = 0x0;
    let _0x1a66bf = JSON['parse'](await _0x2459e1['evaluate'](_0x10f4fd => {
        return Promise['resolve'](JSON['stringify'](document['querySelector'](_0x10f4fd)['getBoundingClientRect']()));
    }, _0x39c142));
    _0x48f353 = minimizeBoundingBox(_0x48f353, _0x150c03);
    _0x1a66bf = minimizeBoundingBox(_0x1a66bf, _0x150c03);
    try {
        do {
            _0x1541c7 = getRandomXY(_0x48f353);
            _0x21ee45 = add(_0x1a66bf, _0x1541c7);
            _0x21ee45['x'] = Math['floor'](_0x21ee45['x']);
            _0x21ee45['y'] = Math['floor'](_0x21ee45['y']);
            _0x4a071d = await _0x2459e1['evaluate']((_0x3320be, _0x20dc36, _0x1822d4) => {
                return Promise['resolve'](document['querySelector'](_0x3320be) === document['elementFromPoint'](_0x20dc36, _0x1822d4));
            }, _0x39c142, _0x21ee45['x'], _0x21ee45['y']);
            if (_0x4a071d) {
                _0x3ca4f0 = add(_0x48f353, _0x1541c7);
                return _0x3ca4f0;
            }
            _0x3bb03b += 0x1;
        } while (!_0x4a071d && _0x3bb03b < 0x28);
    } catch (_0xddc966) {
        console['log']('[-]\x20Puppeteer\x20mouse\x20error');
        console['log'](_0xddc966['message']);
        console['log'](_0xddc966['stack']);
    }
    return _0x48f353;
};
const createCursor = (_0x1522f2, _0x540ad9 = origin) => {
    const _0xfec3f3 = 0xa;
    const _0x1c2ef8 = 0x78;
    let _0xa0a6ff = _0x540ad9;
    const _0x5023ce = async _0x228891 => {
        for (const {
                x,
                y
            } of _0x228891) {
            await _0x1522f2['mouse']['move'](x, y);
        }
    };
    const _0x226779 = {
        async 'clickPath'(_0x2832fc) {
            _0xa0a6ff = _0x2832fc[0x1];
            await _0x5023ce(_0x2832fc[0x0]);
            await _0x1522f2['waitFor'](getRandom(MIN_BEFORE_CLICK_DELAY, MAX_BEFORE_CLICK_DELAY));
            return _0x1522f2['mouse']['down']()['then'](() => _0x1522f2['mouse']['up']());
        },
        async 'click'(_0x3bbc9b, _0xf0cc36 = 0.2) {
            if (_0x3bbc9b) {
                await _0x226779['move'](_0x3bbc9b, _0xf0cc36);
            }
            await _0x1522f2['waitFor'](getRandom(MIN_BEFORE_CLICK_DELAY, MAX_BEFORE_CLICK_DELAY));
            return _0x1522f2['mouse']['down']()['then'](() => _0x1522f2['mouse']['up']());
        },
        'getPrevious'() {
            return _0xa0a6ff;
        },
        'setPrevious'(_0x323651) {
            _0xa0a6ff = _0x323651;
        },
        async 'getPath'(_0x347ea2, _0x1d64a8 = 0.2, _0x3897e0 = ![]) {
            const _0x42e363 = await _0x1522f2['$'](_0x347ea2);
            if (!_0x42e363) {
                throw new Error('Could\x20not\x20find\x20element\x20with\x20selector\x20\x22' + _0x347ea2 + '\x22,\x20make\x20sure\x20you\x27re\x20waiting\x20for\x20the\x20elements\x20with\x20\x22puppeteer.waitForSelector\x22');
            }
            let _0x2312a6 = await _0x42e363['boundingBox']();
            if (!_0x2312a6) {
                throw new Error('Could\x20not\x20find\x20the\x20dimensions\x20of\x20the\x20element\x20you\x27re\x20clicking\x20on,\x20this\x20might\x20be\x20a\x20bug?');
            }
            const {
                height,
                width
            } = _0x2312a6;
            let _0x52d9d5 = await getValidDestination(_0x1522f2, _0x347ea2, _0x2312a6, _0x1d64a8);
            let _0x3ecaba = path(_0xa0a6ff, _0x52d9d5);
            if (_0x3897e0) {
                _0xa0a6ff = _0x52d9d5;
            }
            return [_0x3ecaba, _0x52d9d5];
        },
        async 'move'(_0x2190da, _0x481127) {
            let _0xebe4ac = await _0x226779['getPath'](_0x2190da, _0x481127);
            _0xa0a6ff = _0xebe4ac[0x1];
            await _0x5023ce(_0xebe4ac[0x0]);
        }
    };
    return _0x226779;
};
async function installMouseHelper(_0x491bff) {
    await _0x491bff['evaluateOnNewDocument'](() => {
        if (window !== window['parent']) return;
        window['addEventListener']('DOMContentLoaded', () => {
            const _0x3c8c58 = document['createElement']('puppeteer-mouse-pointer');
            const _0x502045 = document['createElement']('style');
            _0x502045['innerHTML'] = '\x0a\x20\x20\x20\x20\x20\x20\x20\x20puppeteer-mouse-pointer\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pointer-events:\x20none;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20position:\x20absolute;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20top:\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20z-index:\x2010000;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20left:\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20width:\x2020px;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20height:\x2020px;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20background:\x20rgba(0,0,0,.4);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20border:\x201px\x20solid\x20white;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20border-radius:\x2010px;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20margin:\x20-10px\x200\x200\x20-10px;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20padding:\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20transition:\x20background\x20.2s,\x20border-radius\x20.2s,\x20border-color\x20.2s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20puppeteer-mouse-pointer.button-1\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20transition:\x20none;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20background:\x20rgba(0,0,0,0.9);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20puppeteer-mouse-pointer.button-2\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20transition:\x20none;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20border-color:\x20rgba(0,0,255,0.9);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20puppeteer-mouse-pointer.button-3\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20transition:\x20none;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20border-radius:\x204px;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20puppeteer-mouse-pointer.button-4\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20transition:\x20none;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20border-color:\x20rgba(255,0,0,0.9);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20puppeteer-mouse-pointer.button-5\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20transition:\x20none;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20border-color:\x20rgba(0,255,0,0.9);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20';
            document['head']['appendChild'](_0x502045);
            document['body']['appendChild'](_0x3c8c58);
            document['addEventListener']('mousemove', _0x34ea36 => {
                _0x3c8c58['style']['left'] = _0x34ea36['pageX'] + 'px';
                _0x3c8c58['style']['top'] = _0x34ea36['pageY'] + 'px';
                _0x186dff(_0x34ea36['buttons']);
            }, !![]);
            document['addEventListener']('mousedown', _0x47f434 => {
                _0x186dff(_0x47f434['buttons']);
                _0x3c8c58['classList']['add']('button-' + _0x47f434['which']);
            }, !![]);
            document['addEventListener']('mouseup', _0xf88292 => {
                _0x186dff(_0xf88292['buttons']);
                _0x3c8c58['classList']['remove']('button-' + _0xf88292['which']);
            }, !![]);

            function _0x186dff(_0x292b33) {
                for (let _0x177ab9 = 0x0; _0x177ab9 < 0x5; _0x177ab9++) _0x3c8c58['classList']['toggle']('button-' + _0x177ab9, _0x292b33 & 0x1 << _0x177ab9);
            }
        }, ![]);
    });
}
module['exports'] = {
    'installMouseHelper': installMouseHelper,
    'createCursor': createCursor
};